// Protocol Buffers - Google's data interchange format
// Copyright 2009 Google Inc.  All rights reserved.
// http://code.google.com/p/protobuf/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "file.h"

#include <memory>

#include <google/protobuf/io/printer.h>
#include <google/protobuf/descriptor.pb.h>
#include "enum.h"
#include "helpers.h"
#include "message.h"
#include "service.h"
#include "strutil.h"

namespace google {
namespace protobuf {
namespace compiler {
namespace lisp {

// ===================================================================

FileGenerator::FileGenerator(const FileDescriptor* file)
    : file_(file),
      message_generators_(
          new std::unique_ptr<MessageGenerator>[file->message_type_count()]),
      enum_generators_(
          new std::unique_ptr<EnumGenerator>[file->enum_type_count()]),
      service_generators_(
          new std::unique_ptr<ServiceGenerator>[file->service_count()]) {

//      extension_generators_(
//          new scoped_ptr<ExtensionGenerator>[file->extension_count()])

  for (int i = 0; i < file->message_type_count(); i++) {
    message_generators_[i].reset(
      new MessageGenerator(file->message_type(i)));
  }

  for (int i = 0; i < file->enum_type_count(); i++) {
    enum_generators_[i].reset(
      new EnumGenerator(file->enum_type(i)));
  }

  for (int i = 0; i < file->service_count(); i++) {
    service_generators_[i].reset(
      new ServiceGenerator(file->service(i)));
  }

  // for (int i = 0; i < file->extension_count(); i++) {
  //   extension_generators_[i].reset(
  //     new ExtensionGenerator(file->extension(i)));
  // }

  SplitStringUsing(file_->package(), ".", &package_parts_);
}

FileGenerator::~FileGenerator() {}

void FileGenerator::GenerateSource(io::Printer* printer) {
  printer->Print(
      "\n"
      ";;;;    $basename$.lisp\n"
      "\n"
      ";;; Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
      "\n"
      "\n"
      "(cl:in-package #:common-lisp-user)\n",
      "basename", StripProto(file_->name()));

  printer->Print(
      "(eval-when (:compile-toplevel :load-toplevel :execute)\n"
      "  (unless (find-package '#:$package_name$)\n"
      "    (make-package '#:$package_name$ :use nil)))\n",
      "package_name", FileLispPackage(file_));

  // printer->Print(
  //     "(cl:defpackage #:$package_name$\n"
  //     "  (:use)",
  //     "package_name", FileLispPackage(file_));
  // printer->Indent();
  // // Generate package exports for each top-level enum.
  // for (int i = 0; i < file_->enum_type_count(); i++) {
  //   printer->Print("\n");
  //   enum_generators_[i]->GeneratePackageExports(printer);
  // }
  // // Generate package exports for all messages and nested enums.
  // for (int i = 0; i < file_->message_type_count(); i++) {
  //   printer->Print("\n");
  //   message_generators_[i]->GeneratePackageExports(printer);
  // }
  // printer->Outdent();
  // printer->Print(")\n");

  printer->Print(
      "(in-package #:$package_name$)\n"
      "(cl:declaim #.com.google.base:*optimize-default*)\n"
      "\n",
      "package_name", FileLispPackage(file_));

  // Generate a type and constants for each top-level enum.
  for (int i = 0; i < file_->enum_type_count(); i++) {
    enum_generators_[i]->GenerateDefType(printer);
    enum_generators_[i]->GenerateConstants(printer);
  }

  // Generate a type and constants for all nested enums.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateEnumDefinitions(printer);
  }

  // Generate class definitions for all messages.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateClassDefinition(printer);
    message_generators_[i]->GenerateClassMethods(printer);
    printer->Print("\n");
  }


  // for (int i = 0; i < file_->message_type_count(); i++) {
  //   message_generators_[i]->GenerateDescriptorDeclarations(printer);
  // }
  // for (int i = 0; i < file_->enum_type_count(); i++) {
  //   printer->Print(
  //     "const ::google::protobuf::EnumDescriptor* $name$_descriptor_ = NULL;\n",
  //     "name", ClassName(file_->enum_type(i)));
  // }
  // for (int i = 0; i < file_->service_count(); i++) {
  //   printer->Print(
  //     "const ::google::protobuf::ServiceDescriptor* $name$_descriptor_ = NULL;\n",
  //     "name", file_->service(i)->name());
  // }




  // // Generate services.
  // for (int i = 0; i < file_->service_count(); i++) {
  //   if (i == 0) printer->Print("\n");
  //   printer->Print(kThickSeparator);
  //   printer->Print("\n");
  //   service_generators_[i]->GenerateImplementation(printer);
  // }

  // // Define extensions.
  // for (int i = 0; i < file_->extension_count(); i++) {
  //   extension_generators_[i]->GenerateDefinition(printer);
  // }
}

}  // namespace lisp
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
